
for _ in range(10):
    print('Hello, World.')



"""
Hello, World.
Hello, World.
Hello, World.
Hello, World.
Hello, World.
Hello, World.
Hello, World.
Hello, World.
Hello, World.
Hello, World.
"""

# 按照习惯，有时候单个独立下划线是用作一个名字，来表示某个变量是临时的或无关紧要的。
# 例如，在下面的循环中，我们不需要访问正在运行的索引，我们可以使用“_”来表示它只是一个临时值：
# 你也可以在拆分(unpacking)表达式中将单个下划线用作“不关心的”变量，以忽略特定的值。 
# 同样，这个含义只是"依照约定"，并不会在Python解释器中触发特殊的行为。 单个下划线仅仅是一个有效的变量名称，会有这个用途而已。
# 在下面的代码示例中，我将汽车元组拆分为单独的变量，但我只对颜色和里程值感兴趣。 
# 但是，为了使拆分表达式成功运行，我需要将包含在元组中的所有值分配给变量。 在这种情况下，"_" 作为占位符变量可以派上用场：


car = ('red', 'auto', 12, 3812.4)   # 这里是一个元组。
color, _, _, mileage = car

print(color)
print(mileage)



# 2、作为一个名称：这与上面一点稍微有些联系，此时“_”作为临时性的名称使用。这样，当其他人阅读你的代码时将会知道，
# 你分配了一个特定的名称，但是并不会在后面再次用到该名称。例如，下面的例子中，你可能对循环计数中的实际值并不感兴趣，此时就可以使用“_”。

n = 42
for _ in range(n):
do_something()