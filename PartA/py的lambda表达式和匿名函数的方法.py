
Python中lambda表达式

归根到底是一个匿名函数。
所以可以传参，和可以不用传参。

1.lambda的应⽤用场景
如果一个函数有一个返回值，并且只有一句代码，可以使用 lambda简化。

2. lambda语法
lambda 参数列列表 ： 表达式 


lambda表达式的参数可有可⽆无，函数的参数在lambda表达式中完全适用。
lambda函数能接收任何数量的参数但只能返回一个表达式的值

# 函数
def fn1():
	return 200
print(fn1)
print(fn1())
 
# lambda表达式
fn2 = lambda: 100
print(fn2)
print(fn2())


#----------------------------------------------------------------------------------------------------------------------

<function fn1 at 0x00000187A3D7C1E0>
200
<function <lambda> at 0x00000187A5BA5378>
100


#------------------------------------------------------------------------------------------------------------------------

计算a+b的实现
#===============================================================================================================================


def add(a, b):
    return a + b


result = add(1, 2)
print(result)


# 匿名函数表达式的实现方式。
print((lambda a, b: a + b)(1, 2)) 

#=============================================================================================================================

4.3lambda的参数形式
4.3.1无参数

 print((lambda: 100)()) 

#----------------------------------------------------------------------------------------------
一个参数的形式
print((lambda a: a)('hello world'))

#----------------------------------------------------------------------------------------------------------------------

4.3.3默认参数
print((lambda a, b, c=100: a + b + c)(10, 20))



4.3.4可变参数：**args

参数的数量是不固定的。
print((lambda *args: args)(10, 20, 30)) 


4.3.5可变参数：**kwargs
print((lambda **kwargs: kwargs)(name='python', age=20)) 


# lambda表达是来根据字典的指定的键来进行排序。
# =====================================================================================================


students = [
	{'name': 'TOM', 'age': 20},
	{'name': 'ROSE', 'age': 19},
	{'name': 'Jack', 'age': 22}
			]
# 按name值升序排列列
students.sort(key=lambda x: x['name'])
print(students)
 
# 按name值降序排列列
students.sort(key=lambda x: x['name'], reverse=True)
print(students)
 
# 按age值升序排列列
students.sort(key=lambda x: x['age'])
print(students)
