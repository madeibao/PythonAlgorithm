import tensorflow as tf
import numpy as np

# Create input data
X = np.random.randn(2, 6, 6)  # 随机的初始化的操作。 初始的词嵌入的维度为6。
# The second example is of length 4
X[1, 4:] = 0
X_lengths = [6, 4]
cell = tf.nn.rnn_cell.LSTMCell(num_units=8, state_is_tuple=True)  # 基本的单元模块为LSTM模块。
outputs, states = tf.nn.bidirectional_dynamic_rnn(cell_fw=cell, cell_bw=cell, dtype=tf.float64,
                                                  sequence_length=X_lengths, inputs=X)

output_fw, output_bw = outputs  # 输出结果包含有前向的输出结果和后向的输出结果
states_fw, states_bw = states   # 前向的状态值和后向的状态值。

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    states_shape = tf.shape(states)
    print(states_shape.eval())
    c, h = states_fw  # 前向过程的c和h。
    print('print c')
    print(sess.run(c))
    print("print h")
    print(sess.run(h))
    print(":::::::::::\n")
    print('print c1')
    print(sess.run(c[1]))
    print("print c0")
    print(sess.run(c[0]))
    print("前向的传播的结果")
    print(sess.run(output_fw))
    print("最终的输出得的结果为\n")
    print(sess.run(outputs))


"""
[2 2 2 8]
print c
[[-0.05812423  0.09807802 -0.31558296  0.03433107 -0.09334297 -0.20873697
   0.33365926  0.18017579]
 [-0.12611019 -0.04996175  0.57134817 -0.12655353 -0.20171471 -0.36696541
  -0.25820175  1.00357583]]
print h
[[-0.01770766  0.05101654 -0.10076252  0.02307992 -0.05286516 -0.12249188
   0.18158792  0.07947145]
 [-0.07962475 -0.01295163  0.27186823 -0.07029694 -0.07192907 -0.11484086
  -0.09416244  0.38826152]]
:::::::::::

print c1
[-0.12611019 -0.04996175  0.57134817 -0.12655353 -0.20171471 -0.36696541
 -0.25820175  1.00357583]
print c0
[-0.05812423  0.09807802 -0.31558296  0.03433107 -0.09334297 -0.20873697
  0.33365926  0.18017579]
前向的传播的结果
[[[-0.08095951  0.13174251 -0.14680124  0.09277861 -0.05975268
   -0.05063772 -0.05627768  0.07853399]
  [-0.06385302  0.26282392 -0.13119456  0.01791378 -0.15947442
   -0.10387082  0.10457178 -0.02050636]
  [-0.11735095  0.4677953  -0.27513402  0.10479441 -0.17424652
   -0.03514638  0.04434975  0.1023246 ]
  [-0.259099    0.01232009 -0.34776022  0.03078474  0.01046392
    0.18289802 -0.07535369 -0.22689465]
  [-0.08842021 -0.0085845  -0.23871986  0.13190342 -0.08035589
    0.05624437  0.01697248  0.01525899]
  [-0.01770766  0.05101654 -0.10076252  0.02307992 -0.05286516
   -0.12249188  0.18158792  0.07947145]]

 [[ 0.01697967 -0.05021322 -0.18904007  0.08029396 -0.05521334
    0.03854436 -0.05109505  0.11776695]
  [ 0.01043742  0.00827035 -0.02842886  0.04210774 -0.10463688
   -0.0395075   0.03921692  0.15699439]
  [-0.02431318  0.06385085  0.07453284 -0.03388788 -0.1339293
   -0.09211285  0.04322977  0.25032063]
  [-0.07962475 -0.01295163  0.27186823 -0.07029694 -0.07192907
   -0.11484086 -0.09416244  0.38826152]
  [ 0.          0.          0.          0.          0.
    0.          0.          0.        ]
  [ 0.          0.          0.          0.          0.
    0.          0.          0.        ]]]
最终的输出得的结果为

(array([[[-0.08095951,  0.13174251, -0.14680124,  0.09277861,
         -0.05975268, -0.05063772, -0.05627768,  0.07853399],
        [-0.06385302,  0.26282392, -0.13119456,  0.01791378,
         -0.15947442, -0.10387082,  0.10457178, -0.02050636],
        [-0.11735095,  0.4677953 , -0.27513402,  0.10479441,
         -0.17424652, -0.03514638,  0.04434975,  0.1023246 ],
        [-0.259099  ,  0.01232009, -0.34776022,  0.03078474,
          0.01046392,  0.18289802, -0.07535369, -0.22689465],
        [-0.08842021, -0.0085845 , -0.23871986,  0.13190342,
         -0.08035589,  0.05624437,  0.01697248,  0.01525899],
        [-0.01770766,  0.05101654, -0.10076252,  0.02307992,
         -0.05286516, -0.12249188,  0.18158792,  0.07947145]],

       [[ 0.01697967, -0.05021322, -0.18904007,  0.08029396,
         -0.05521334,  0.03854436, -0.05109505,  0.11776695],
        [ 0.01043742,  0.00827035, -0.02842886,  0.04210774,
         -0.10463688, -0.0395075 ,  0.03921692,  0.15699439],
        [-0.02431318,  0.06385085,  0.07453284, -0.03388788,
         -0.1339293 , -0.09211285,  0.04322977,  0.25032063],
        [-0.07962475, -0.01295163,  0.27186823, -0.07029694,
         -0.07192907, -0.11484086, -0.09416244,  0.38826152],
        [ 0.        ,  0.        ,  0.        ,  0.        ,
          0.        ,  0.        ,  0.        ,  0.        ],
        [ 0.        ,  0.        ,  0.        ,  0.        ,
          0.        ,  0.        ,  0.        ,  0.        ]]]), 
array([[[-0.08700656,  0.32278904, -0.28437211,  0.11200848,
         -0.12630044, -0.02711701,  0.08725957,  0.04015597],
        [-0.04899734,  0.23271012, -0.20396693,  0.11478759,
         -0.18240287, -0.03275387,  0.16203734, -0.02223437],
        [-0.07988629,  0.04922336, -0.24398511,  0.24699884,
         -0.07097358,  0.00141274,  0.03064962,  0.05084344],
        [ 0.02906215, -0.15449024, -0.09253257,  0.03057058,
          0.0649727 ,  0.07046042,  0.02953084, -0.16831149],
        [ 0.06833871,  0.03260209,  0.02425476, -0.03710149,
         -0.08270205, -0.11563918,  0.15739598,  0.10166289],
        [ 0.024147  ,  0.05319803,  0.0836221 , -0.06875618,
         -0.00595354, -0.19500566,  0.15027458,  0.05810902]],

       [[-0.0379662 , -0.00779385,  0.00903729, -0.00778613,
         -0.09932165, -0.03828682, -0.11606321,  0.31855664],
        [-0.04338081,  0.04465461,  0.24131982, -0.1182809 ,
         -0.1168769 , -0.16745942, -0.05548372,  0.21899685],
        [-0.06890591, -0.01445184,  0.23719599, -0.07378362,
         -0.10672508, -0.14036785, -0.09964166,  0.20880279],
        [-0.03780079, -0.05803981,  0.21555506, -0.02744577,
         -0.02398358, -0.07064233, -0.10830727,  0.16014167],
        [ 0.        ,  0.        ,  0.        ,  0.        ,
          0.        ,  0.        ,  0.        ,  0.        ],
        [ 0.        ,  0.        ,  0.        ,  0.        ,
          0.        ,  0.        ,  0.        ,  0.        ]]]))

"""






